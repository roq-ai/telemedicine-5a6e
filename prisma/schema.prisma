generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model appointment {
  id                                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date                               DateTime @db.Date
  time                               DateTime @db.Time(6)
  location                           String   @db.VarChar(255)
  doctor_id                          String?  @db.Uuid
  customer_id                        String?  @db.Uuid
  created_at                         DateTime @default(now()) @db.Timestamp(6)
  updated_at                         DateTime @default(now()) @db.Timestamp(6)
  user_appointment_customer_idTouser user?    @relation("appointment_customer_idTouser", fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_customer_id")
  user_appointment_doctor_idTouser   user?    @relation("appointment_doctor_idTouser", fields: [doctor_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_doctor_id")
}

model medical_record {
  id                                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  diagnosis                             String    @db.VarChar(255)
  prescription                          String    @db.VarChar(255)
  date_of_visit                         DateTime  @db.Date
  next_visit_date                       DateTime? @db.Date
  doctor_id                             String?   @db.Uuid
  customer_id                           String?   @db.Uuid
  created_at                            DateTime  @default(now()) @db.Timestamp(6)
  updated_at                            DateTime  @default(now()) @db.Timestamp(6)
  user_medical_record_customer_idTouser user?     @relation("medical_record_customer_idTouser", fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_customer_id")
  user_medical_record_doctor_idTouser   user?     @relation("medical_record_doctor_idTouser", fields: [doctor_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_doctor_id")
}

model organization {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_id")
}

model profile {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  specialization String?  @db.VarChar(255)
  experience     Int?
  qualification  String?  @db.VarChar(255)
  working_hours  String?  @db.VarChar(255)
  user_id        String?  @db.Uuid
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @default(now()) @db.Timestamp(6)
  user           user?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_id")
}

model user {
  id                                              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                                           String           @unique @db.VarChar(255)
  firstName                                       String?          @db.VarChar(255)
  lastName                                        String?          @db.VarChar(255)
  roq_user_id                                     String           @db.VarChar(255)
  tenant_id                                       String           @db.VarChar(255)
  created_at                                      DateTime         @default(now()) @db.Timestamp(6)
  updated_at                                      DateTime         @default(now()) @db.Timestamp(6)
  appointment_appointment_customer_idTouser       appointment[]    @relation("appointment_customer_idTouser")
  appointment_appointment_doctor_idTouser         appointment[]    @relation("appointment_doctor_idTouser")
  medical_record_medical_record_customer_idTouser medical_record[] @relation("medical_record_customer_idTouser")
  medical_record_medical_record_doctor_idTouser   medical_record[] @relation("medical_record_doctor_idTouser")
  organization                                    organization[]
  profile                                         profile[]
}
